@startuml UML

class Mesh 
Mesh --> BorderMesh
Mesh --> LineMesh
Mesh --> PlayerMesh

class Mesh {
    
    #vao: GLuint
    #vbo: GLuint
    #void bind() 

    +void terminate()
    +virtual void draw() = 0
    +void init()
}

class vertex_data_t<<(S,#FF7700)struct>> {
    +position[3]: GLfloat
    +color[3]: GLubyte
}

BorderMech "1" *--* "1" BorderModel : contains
class BorderMech {
    +BorderMesh()
    +virtual void draw() override
}

class BorderModel {

    #virtual void init_uniforms() override;
    #virtual void init_values() override;
   
    +BorderModel();
    +virtual void update(GLFWwindow* window) override;
    +virtual void draw() override;
}
class Display {
    - window: GLFWwindow* 
    - user_data: user_data_t* 

    + Display(user_data_t* user_data)
    + get_window(): GLFWwindow*
    + terminate(): int
}
Game "1" *--* "1" PlayerManager : contains
Game "1" *--* "1" BorderModel : contains
Game "1" *--* "1" Font : contains
Game "1" *--* "1" Menu : contains


class Game {
 
    -window: GLFWwindow* 
    -border_model: shared_ptr<BorderModel> 
    -PlayerManager: shared_ptr<PlayerManager> 
    -font: shared_ptr<Font> 
    -menu: shared_ptr<Menu> 
    -panel: shared_ptr<SidePanel> 
    -has_players: bool
    -show_win_frames: int

    +Game(window: GLFWwindow*)
    +loop(): void
    +terminate(): void
    +get_player_count : int
} 
    enum GameState<GameCLASS> {
    GAME_ACTIVE
    GAME_MENU
    GAME_WIN
    GAME_OVER
}

LineMesh "1" *--* "1" Point : contains
class LineMesh {

    #points: vector<Point> 
    #line_points: vector<Point> 
    #actual_point: Point
    #last_point: Point
    #second_last_point: Point
    #color: array<GLubyte, 3> 

    +LineMesh(Point first_point, std::array<GLubyte, 3> color)
    +virtual draw() override: void
    +set_points(std::vector<Point> points): void
    +add_point(Point point): void
    +update():void
    +clear: void
}

LineModel "1" *--* "1" Point : contains
class LineModel {
  
    #virtual void init_uniforms() override
    #virtual void init_values() override
    #points: vector<Point>
    #LineMesh: shared_ptr<LineMesh>
    #color: array<GLubyte, 3>

    +GLint start_pos_y_loc
    +GLint start_pos_x_loc
    +GLfloat start_pos_y
    +GLfloat start_pos_x

    +LineModel(point: Point, color: array<GLubyte, 3>)
    +virtual void update(window: GLFWwindow) override
    +virtual void draw() override
    +void add_point(point: Point)
    +void set_color(std::array<GLubyte, 3> color)
    +get_points(): vector<Point>
    +set_start_position(point: Point): void
    +clear(): void
}
class model
model --> BorderModel
model --> LineModel
model --> PlayerModel

model "1" *--* "1" Mesh : contains
class model {
    #user_data_t* user_data
    #virtual void init_uniforms() = 0
    #virtual void init_values() = 0

    +Mesh: shared_ptr<Mesh>
    +model_type: ModelType
    +shader_id: GLuint
    +virtual update(window: GLFWwindow*): void
    +virtual draw(): void
}
enum ModelType {
    MODEL_PLAYER
    MODEL_LINE
    MODEL_BORDER
}

PlayerManager "1" *-- "many" PlayerModel : contains
PlayerManager "1" *-- "1" Point : contains
PlayerManager "1" *-- "1" Control : contains
class PlayerManager {
   
    #players: map<int, std::shared_ptr<PlayerModel>>
    #dead_players: vector<int>
    #window: GLFWwindow*
    #reset_player(id: int): void
    #get_oponent_trace(id: int): vector<Point>
    #get_player_trace(int id): vector<Point>
    #get_player_position(int id): Point
    #max_score: int

    +is_updated = false: bool
    +PlayerManager()
    +add_player(control: Control,color: array<GLubyte, 3> ): void
    +update(window: GLFWwindow*): void
    +get_all_points(): vector<Point>
    +detect_collisions(): void
    +get_alive_players(): vector<int>
    +get_dead_players(): vector<int>
    +add_players(): void
    +get_players_count(): int
    +update_score(): void
    +check_score(): void
    +get_max_score(): int
    +draw(): void
    +reset(): void
    +terminate(): void
}

PlayerModel "1" *--* "1" PlayerMesh : contains
PlayerModel "1" *--* "1" Point : contains
PlayerModel "1" *--* "1" LineModel : contains
PlayerModel "1" *--* "1" Control : contains
class PlayerModel {
       
    #virtual void init_uniforms() override;
    #virtual void init_values() override;
    #points: vector<Point>
    #lines: shared_ptr<LineModel> 
    #blank_count: int
    #random_length: int
    #id: int
    #control: Control
    #color: array<GLubyte, 3> 

    +trans_y_loc: GLint
    +trans_x_loc: GLint
    +start_pos_y_loc: GLfloat
    +start_pos_x_loc: GLfloat
    +time: double
    +last_point: Point
    +speed_x:GLflaot
    +speed_y:GLflaot
    +is_alive: bool
    +GLfloat trans_y;
    +GLfloat trans_x;
    +GLfloat start_pos_y;
    +GLfloat start_pos_x;

    +PlayerModel(int id, GLfloat x, GLfloat y, std::array<GLubyte, 3> color);
    +virtual void update(GLFWwindow* window) override;
    +virtual void draw() override;
    +void set_keys(Control control);
    +set_keys(control: Control): void
    +get_position(): Point
    +set_position(point: Point): void
    +get_id(): int
    +get_line_points(): vector<Point> 
    +clear(): void
}
class Control<<(S,#FF7700)struct>>{
    +int left_key 
    +int right_key
}
class Point <<(S,#FF7700)struct>> {
    +GLfloat x
    +GLfloat y
}
class shader {
      
    -{static}read_from_file(path: const char*): char*

    +Shader(vs_path: string,fs_path: string,shader_id: GLuint*):
    +static GLuint compile(type: GLenum,shader_path: const char* ,shader_tag: const char*):
    +GLuint compile();
}
class user<<(S,#FF7700)struct>> {
    +int window_width;
    +int window_height;
}

SidePanel "1" *--* "1" Font : contains
class SidePanel {
    -window : GLFWwindow* 
    -Font: shared_ptr<Font> 
    -id_winner: int
    -full_frames: int
    -blank_frames: int
    -max_frames: int
    +SidePanel( window: GLFWwindow*, Font:shared_ptr<Font>)
    +draw (Player_count: int,max_score: int): void
    +set_winner(id: int) : void
    +update() : void
}
Menu "1" *--* "1" Font : contains

class Menu {
    #window: GLFWwindow* 
    #Font: shared_ptr<Font> 
    +Menu( window: GLFWwindow*,Font: shared_ptr<Font> );
    +draw(): void
    +update(): void

}
class Font {
    -Characters: map<char, Character>
    -texture: unsigned int
    -VAO: unsigned int
    -VBO: unsigned int
    -shader_id : GLuint
    +Font();
    +void draw_text(text: string, 
                    x: float, 
                    y: float, 
                    scale: float, 
                    color: vec3);
}

class Control<<(S,#FF7700)struct>> {
    TextureID: unsigned int
    Size: ivec2       
    Bearing: ivec2     
    Advance: unsigned int
}
GameOver "1" *--* "1" Font : contains
class GameOver {
    -GLFWwindow* window;
    -std::shared_ptr<Font> font;
    -int full_frames = 0;
    -int blank_frames = 0;
    -int max_frames = 15;
   
    +GameOver(GLFWwindow* window, std::shared_ptr<Font> font);
    +void draw();
    +void update();
    +int get_winner();
}
@enduml